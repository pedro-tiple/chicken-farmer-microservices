// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: chicken_farmer/v1/farm.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FarmServiceClient is the client API for FarmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FarmServiceClient interface {
	NewFarm(ctx context.Context, in *NewFarmRequest, opts ...grpc.CallOption) (*NewFarmResponse, error)
	DeleteFarm(ctx context.Context, in *DeleteFarmRequest, opts ...grpc.CallOption) (*DeleteFarmResponse, error)
	FeedChickensOfBarn(ctx context.Context, in *FeedChickensOfBarnRequest, opts ...grpc.CallOption) (*FeedChickensOfBarnResponse, error)
	// REST exposed functions
	FarmDetails(ctx context.Context, in *FarmDetailsRequest, opts ...grpc.CallOption) (*FarmDetailsResponse, error)
	BuyBarn(ctx context.Context, in *BuyBarnRequest, opts ...grpc.CallOption) (*BuyBarnResponse, error)
	BuyFeedBag(ctx context.Context, in *BuyFeedBagRequest, opts ...grpc.CallOption) (*BuyFeedBagResponse, error)
	BuyChicken(ctx context.Context, in *BuyChickenRequest, opts ...grpc.CallOption) (*BuyChickenResponse, error)
	SellChicken(ctx context.Context, in *SellChickenRequest, opts ...grpc.CallOption) (*SellChickenResponse, error)
	FeedChicken(ctx context.Context, in *FeedChickenRequest, opts ...grpc.CallOption) (*FeedChickenResponse, error)
}

type farmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmServiceClient(cc grpc.ClientConnInterface) FarmServiceClient {
	return &farmServiceClient{cc}
}

func (c *farmServiceClient) NewFarm(ctx context.Context, in *NewFarmRequest, opts ...grpc.CallOption) (*NewFarmResponse, error) {
	out := new(NewFarmResponse)
	err := c.cc.Invoke(ctx, "/chicken_farmer.v1.FarmService/NewFarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) DeleteFarm(ctx context.Context, in *DeleteFarmRequest, opts ...grpc.CallOption) (*DeleteFarmResponse, error) {
	out := new(DeleteFarmResponse)
	err := c.cc.Invoke(ctx, "/chicken_farmer.v1.FarmService/DeleteFarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) FeedChickensOfBarn(ctx context.Context, in *FeedChickensOfBarnRequest, opts ...grpc.CallOption) (*FeedChickensOfBarnResponse, error) {
	out := new(FeedChickensOfBarnResponse)
	err := c.cc.Invoke(ctx, "/chicken_farmer.v1.FarmService/FeedChickensOfBarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) FarmDetails(ctx context.Context, in *FarmDetailsRequest, opts ...grpc.CallOption) (*FarmDetailsResponse, error) {
	out := new(FarmDetailsResponse)
	err := c.cc.Invoke(ctx, "/chicken_farmer.v1.FarmService/FarmDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) BuyBarn(ctx context.Context, in *BuyBarnRequest, opts ...grpc.CallOption) (*BuyBarnResponse, error) {
	out := new(BuyBarnResponse)
	err := c.cc.Invoke(ctx, "/chicken_farmer.v1.FarmService/BuyBarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) BuyFeedBag(ctx context.Context, in *BuyFeedBagRequest, opts ...grpc.CallOption) (*BuyFeedBagResponse, error) {
	out := new(BuyFeedBagResponse)
	err := c.cc.Invoke(ctx, "/chicken_farmer.v1.FarmService/BuyFeedBag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) BuyChicken(ctx context.Context, in *BuyChickenRequest, opts ...grpc.CallOption) (*BuyChickenResponse, error) {
	out := new(BuyChickenResponse)
	err := c.cc.Invoke(ctx, "/chicken_farmer.v1.FarmService/BuyChicken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) SellChicken(ctx context.Context, in *SellChickenRequest, opts ...grpc.CallOption) (*SellChickenResponse, error) {
	out := new(SellChickenResponse)
	err := c.cc.Invoke(ctx, "/chicken_farmer.v1.FarmService/SellChicken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServiceClient) FeedChicken(ctx context.Context, in *FeedChickenRequest, opts ...grpc.CallOption) (*FeedChickenResponse, error) {
	out := new(FeedChickenResponse)
	err := c.cc.Invoke(ctx, "/chicken_farmer.v1.FarmService/FeedChicken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmServiceServer is the server API for FarmService service.
// All implementations must embed UnimplementedFarmServiceServer
// for forward compatibility
type FarmServiceServer interface {
	NewFarm(context.Context, *NewFarmRequest) (*NewFarmResponse, error)
	DeleteFarm(context.Context, *DeleteFarmRequest) (*DeleteFarmResponse, error)
	FeedChickensOfBarn(context.Context, *FeedChickensOfBarnRequest) (*FeedChickensOfBarnResponse, error)
	// REST exposed functions
	FarmDetails(context.Context, *FarmDetailsRequest) (*FarmDetailsResponse, error)
	BuyBarn(context.Context, *BuyBarnRequest) (*BuyBarnResponse, error)
	BuyFeedBag(context.Context, *BuyFeedBagRequest) (*BuyFeedBagResponse, error)
	BuyChicken(context.Context, *BuyChickenRequest) (*BuyChickenResponse, error)
	SellChicken(context.Context, *SellChickenRequest) (*SellChickenResponse, error)
	FeedChicken(context.Context, *FeedChickenRequest) (*FeedChickenResponse, error)
	mustEmbedUnimplementedFarmServiceServer()
}

// UnimplementedFarmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFarmServiceServer struct {
}

func (UnimplementedFarmServiceServer) NewFarm(context.Context, *NewFarmRequest) (*NewFarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFarm not implemented")
}
func (UnimplementedFarmServiceServer) DeleteFarm(context.Context, *DeleteFarmRequest) (*DeleteFarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFarm not implemented")
}
func (UnimplementedFarmServiceServer) FeedChickensOfBarn(context.Context, *FeedChickensOfBarnRequest) (*FeedChickensOfBarnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedChickensOfBarn not implemented")
}
func (UnimplementedFarmServiceServer) FarmDetails(context.Context, *FarmDetailsRequest) (*FarmDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FarmDetails not implemented")
}
func (UnimplementedFarmServiceServer) BuyBarn(context.Context, *BuyBarnRequest) (*BuyBarnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyBarn not implemented")
}
func (UnimplementedFarmServiceServer) BuyFeedBag(context.Context, *BuyFeedBagRequest) (*BuyFeedBagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyFeedBag not implemented")
}
func (UnimplementedFarmServiceServer) BuyChicken(context.Context, *BuyChickenRequest) (*BuyChickenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyChicken not implemented")
}
func (UnimplementedFarmServiceServer) SellChicken(context.Context, *SellChickenRequest) (*SellChickenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellChicken not implemented")
}
func (UnimplementedFarmServiceServer) FeedChicken(context.Context, *FeedChickenRequest) (*FeedChickenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedChicken not implemented")
}
func (UnimplementedFarmServiceServer) mustEmbedUnimplementedFarmServiceServer() {}

// UnsafeFarmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FarmServiceServer will
// result in compilation errors.
type UnsafeFarmServiceServer interface {
	mustEmbedUnimplementedFarmServiceServer()
}

func RegisterFarmServiceServer(s grpc.ServiceRegistrar, srv FarmServiceServer) {
	s.RegisterService(&FarmService_ServiceDesc, srv)
}

func _FarmService_NewFarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).NewFarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chicken_farmer.v1.FarmService/NewFarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).NewFarm(ctx, req.(*NewFarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_DeleteFarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).DeleteFarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chicken_farmer.v1.FarmService/DeleteFarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).DeleteFarm(ctx, req.(*DeleteFarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_FeedChickensOfBarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedChickensOfBarnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).FeedChickensOfBarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chicken_farmer.v1.FarmService/FeedChickensOfBarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).FeedChickensOfBarn(ctx, req.(*FeedChickensOfBarnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_FarmDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarmDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).FarmDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chicken_farmer.v1.FarmService/FarmDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).FarmDetails(ctx, req.(*FarmDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_BuyBarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyBarnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).BuyBarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chicken_farmer.v1.FarmService/BuyBarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).BuyBarn(ctx, req.(*BuyBarnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_BuyFeedBag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyFeedBagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).BuyFeedBag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chicken_farmer.v1.FarmService/BuyFeedBag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).BuyFeedBag(ctx, req.(*BuyFeedBagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_BuyChicken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyChickenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).BuyChicken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chicken_farmer.v1.FarmService/BuyChicken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).BuyChicken(ctx, req.(*BuyChickenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_SellChicken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellChickenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).SellChicken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chicken_farmer.v1.FarmService/SellChicken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).SellChicken(ctx, req.(*SellChickenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmService_FeedChicken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedChickenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServiceServer).FeedChicken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chicken_farmer.v1.FarmService/FeedChicken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServiceServer).FeedChicken(ctx, req.(*FeedChickenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FarmService_ServiceDesc is the grpc.ServiceDesc for FarmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FarmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chicken_farmer.v1.FarmService",
	HandlerType: (*FarmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewFarm",
			Handler:    _FarmService_NewFarm_Handler,
		},
		{
			MethodName: "DeleteFarm",
			Handler:    _FarmService_DeleteFarm_Handler,
		},
		{
			MethodName: "FeedChickensOfBarn",
			Handler:    _FarmService_FeedChickensOfBarn_Handler,
		},
		{
			MethodName: "FarmDetails",
			Handler:    _FarmService_FarmDetails_Handler,
		},
		{
			MethodName: "BuyBarn",
			Handler:    _FarmService_BuyBarn_Handler,
		},
		{
			MethodName: "BuyFeedBag",
			Handler:    _FarmService_BuyFeedBag_Handler,
		},
		{
			MethodName: "BuyChicken",
			Handler:    _FarmService_BuyChicken_Handler,
		},
		{
			MethodName: "SellChicken",
			Handler:    _FarmService_SellChicken_Handler,
		},
		{
			MethodName: "FeedChicken",
			Handler:    _FarmService_FeedChicken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chicken_farmer/v1/farm.proto",
}
