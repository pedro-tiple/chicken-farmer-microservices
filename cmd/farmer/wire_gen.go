// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"chicken-farmer/backend/internal/farmer"
	"chicken-farmer/backend/internal/farmer/mongo"
	grpc2 "chicken-farmer/backend/internal/pkg/grpc"
	"context"
	"go.uber.org/zap"
	"google.golang.org/grpc"
)

import (
	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func initializeService(ctx context.Context, address string, logger *zap.SugaredLogger, farmGRPCConn grpc.ClientConnInterface) (farmer.Service, error) {
	datasource, err := mongo.ProvideDatasource(ctx)
	if err != nil {
		return farmer.Service{}, err
	}
	farmServiceClient := grpc2.NewFarmServiceClient(farmGRPCConn)
	farmService := farmer.ProvideFarmService(farmServiceClient)
	controller := farmer.ProvideController(logger, datasource, farmService)
	service := farmer.ProvideService(address, logger, controller)
	return service, nil
}
