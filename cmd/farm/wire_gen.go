// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"chicken-farmer/backend/internal/farm"
	sql2 "chicken-farmer/backend/internal/farm/sql"
	grpc2 "chicken-farmer/backend/internal/pkg/grpc"
	"database/sql"
	"github.com/ThreeDotsLabs/watermill/message"
	"go.uber.org/zap"
	"google.golang.org/grpc"
)

import (
	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func initializeService(address string, logger *zap.SugaredLogger, dbConnection *sql.DB, farmerGRPCConn grpc.ClientConnInterface, subscriber message.Subscriber) (farm.Service, error) {
	datasource, err := sql2.ProvideDatasource(dbConnection)
	if err != nil {
		return farm.Service{}, err
	}
	farmerServiceClient := grpc2.NewFarmerServiceClient(farmerGRPCConn)
	farmerService := farm.ProvideFarmerService(farmerServiceClient)
	controller, err := farm.ProvideController(logger, datasource, farmerService, subscriber)
	if err != nil {
		return farm.Service{}, err
	}
	service := farm.ProvideService(address, logger, controller)
	return service, nil
}
