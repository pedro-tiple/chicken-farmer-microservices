/* tslint:disable */
/* eslint-disable */
/**
 * chicken_farmer/v1/farm.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface FarmServiceBuyFeedBagRequest
 */
export interface FarmServiceBuyFeedBagRequest {
    /**
     * 
     * @type {number}
     * @memberof FarmServiceBuyFeedBagRequest
     */
    'amount': number;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface V1Barn
 */
export interface V1Barn {
    /**
     * 
     * @type {string}
     * @memberof V1Barn
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof V1Barn
     */
    'feed': number;
    /**
     * 
     * @type {boolean}
     * @memberof V1Barn
     */
    'hasAutoFeeder': boolean;
    /**
     * 
     * @type {Array<V1Chicken>}
     * @memberof V1Barn
     */
    'chickens': Array<V1Chicken>;
}
/**
 * 
 * @export
 * @interface V1BuyChickenRequest
 */
export interface V1BuyChickenRequest {
    /**
     * 
     * @type {string}
     * @memberof V1BuyChickenRequest
     */
    'barnId': string;
}
/**
 * 
 * @export
 * @interface V1BuyChickenResponse
 */
export interface V1BuyChickenResponse {
    /**
     * 
     * @type {string}
     * @memberof V1BuyChickenResponse
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface V1Chicken
 */
export interface V1Chicken {
    /**
     * 
     * @type {string}
     * @memberof V1Chicken
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof V1Chicken
     */
    'dateOfBirth': number;
    /**
     * 
     * @type {number}
     * @memberof V1Chicken
     */
    'restingUntil': number;
    /**
     * 
     * @type {number}
     * @memberof V1Chicken
     */
    'normalEggsLaid': number;
    /**
     * 
     * @type {number}
     * @memberof V1Chicken
     */
    'goldEggsLaid': number;
}
/**
 * 
 * @export
 * @interface V1Farm
 */
export interface V1Farm {
    /**
     * 
     * @type {string}
     * @memberof V1Farm
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof V1Farm
     */
    'day': number;
    /**
     * 
     * @type {number}
     * @memberof V1Farm
     */
    'goldenEggs': number;
    /**
     * 
     * @type {Array<V1Barn>}
     * @memberof V1Farm
     */
    'barns': Array<V1Barn>;
}
/**
 * 
 * @export
 * @interface V1FarmDetailsResponse
 */
export interface V1FarmDetailsResponse {
    /**
     * 
     * @type {V1Farm}
     * @memberof V1FarmDetailsResponse
     */
    'farm': V1Farm;
}
/**
 * 
 * @export
 * @interface V1GetGoldEggsResponse
 */
export interface V1GetGoldEggsResponse {
    /**
     * 
     * @type {number}
     * @memberof V1GetGoldEggsResponse
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface V1LoginRequest
 */
export interface V1LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof V1LoginRequest
     */
    'farmerName': string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface V1LoginResponse
 */
export interface V1LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof V1LoginResponse
     */
    'jwt'?: string;
}
/**
 * 
 * @export
 * @interface V1NewFarmResponse
 */
export interface V1NewFarmResponse {
    /**
     * 
     * @type {string}
     * @memberof V1NewFarmResponse
     */
    'farmId'?: string;
}
/**
 * 
 * @export
 * @interface V1RegisterRequest
 */
export interface V1RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof V1RegisterRequest
     */
    'farmerName': string;
    /**
     * 
     * @type {string}
     * @memberof V1RegisterRequest
     */
    'farmName': string;
    /**
     * 
     * @type {string}
     * @memberof V1RegisterRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface V1RegisterResponse
 */
export interface V1RegisterResponse {
    /**
     * 
     * @type {string}
     * @memberof V1RegisterResponse
     */
    'farmerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1RegisterResponse
     */
    'farmId'?: string;
}

/**
 * FarmServiceApi - axios parameter creator
 * @export
 */
export const FarmServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceBuyBarn: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('farmServiceBuyBarn', 'body', body)
            const localVarPath = `/v1/farm/barns/buy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1BuyChickenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceBuyChicken: async (body: V1BuyChickenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('farmServiceBuyChicken', 'body', body)
            const localVarPath = `/v1/farm/chickens/buy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} barnId 
         * @param {FarmServiceBuyFeedBagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceBuyFeedBag: async (barnId: string, body: FarmServiceBuyFeedBagRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'barnId' is not null or undefined
            assertParamExists('farmServiceBuyFeedBag', 'barnId', barnId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('farmServiceBuyFeedBag', 'body', body)
            const localVarPath = `/v1/farm/barns/{barnId}/buy-feed-bag`
                .replace(`{${"barnId"}}`, encodeURIComponent(String(barnId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary REST exposed functions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceFarmDetails: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/farm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chickenId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceFeedChicken: async (chickenId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chickenId' is not null or undefined
            assertParamExists('farmServiceFeedChicken', 'chickenId', chickenId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('farmServiceFeedChicken', 'body', body)
            const localVarPath = `/v1/farm/chickens/{chickenId}/feed`
                .replace(`{${"chickenId"}}`, encodeURIComponent(String(chickenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chickenId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceSellChicken: async (chickenId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chickenId' is not null or undefined
            assertParamExists('farmServiceSellChicken', 'chickenId', chickenId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('farmServiceSellChicken', 'body', body)
            const localVarPath = `/v1/farm/chickens/{chickenId}/sell`
                .replace(`{${"chickenId"}}`, encodeURIComponent(String(chickenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FarmServiceApi - functional programming interface
 * @export
 */
export const FarmServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FarmServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmServiceBuyBarn(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.farmServiceBuyBarn(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {V1BuyChickenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmServiceBuyChicken(body: V1BuyChickenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1BuyChickenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.farmServiceBuyChicken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} barnId 
         * @param {FarmServiceBuyFeedBagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmServiceBuyFeedBag(barnId: string, body: FarmServiceBuyFeedBagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.farmServiceBuyFeedBag(barnId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary REST exposed functions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmServiceFarmDetails(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1FarmDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.farmServiceFarmDetails(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} chickenId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmServiceFeedChicken(chickenId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.farmServiceFeedChicken(chickenId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} chickenId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmServiceSellChicken(chickenId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.farmServiceSellChicken(chickenId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FarmServiceApi - factory interface
 * @export
 */
export const FarmServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FarmServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceBuyBarn(body: object, options?: any): AxiosPromise<object> {
            return localVarFp.farmServiceBuyBarn(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {V1BuyChickenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceBuyChicken(body: V1BuyChickenRequest, options?: any): AxiosPromise<V1BuyChickenResponse> {
            return localVarFp.farmServiceBuyChicken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} barnId 
         * @param {FarmServiceBuyFeedBagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceBuyFeedBag(barnId: string, body: FarmServiceBuyFeedBagRequest, options?: any): AxiosPromise<object> {
            return localVarFp.farmServiceBuyFeedBag(barnId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary REST exposed functions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceFarmDetails(options?: any): AxiosPromise<V1FarmDetailsResponse> {
            return localVarFp.farmServiceFarmDetails(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chickenId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceFeedChicken(chickenId: string, body: object, options?: any): AxiosPromise<object> {
            return localVarFp.farmServiceFeedChicken(chickenId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chickenId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmServiceSellChicken(chickenId: string, body: object, options?: any): AxiosPromise<object> {
            return localVarFp.farmServiceSellChicken(chickenId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FarmServiceApi - object-oriented interface
 * @export
 * @class FarmServiceApi
 * @extends {BaseAPI}
 */
export class FarmServiceApi extends BaseAPI {
    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmServiceApi
     */
    public farmServiceBuyBarn(body: object, options?: AxiosRequestConfig) {
        return FarmServiceApiFp(this.configuration).farmServiceBuyBarn(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1BuyChickenRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmServiceApi
     */
    public farmServiceBuyChicken(body: V1BuyChickenRequest, options?: AxiosRequestConfig) {
        return FarmServiceApiFp(this.configuration).farmServiceBuyChicken(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} barnId 
     * @param {FarmServiceBuyFeedBagRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmServiceApi
     */
    public farmServiceBuyFeedBag(barnId: string, body: FarmServiceBuyFeedBagRequest, options?: AxiosRequestConfig) {
        return FarmServiceApiFp(this.configuration).farmServiceBuyFeedBag(barnId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary REST exposed functions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmServiceApi
     */
    public farmServiceFarmDetails(options?: AxiosRequestConfig) {
        return FarmServiceApiFp(this.configuration).farmServiceFarmDetails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} chickenId 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmServiceApi
     */
    public farmServiceFeedChicken(chickenId: string, body: object, options?: AxiosRequestConfig) {
        return FarmServiceApiFp(this.configuration).farmServiceFeedChicken(chickenId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} chickenId 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmServiceApi
     */
    public farmServiceSellChicken(chickenId: string, body: object, options?: AxiosRequestConfig) {
        return FarmServiceApiFp(this.configuration).farmServiceSellChicken(chickenId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FarmerServiceApi - axios parameter creator
 * @export
 */
export const FarmerServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1LoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerServiceLogin: async (body: V1LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('farmerServiceLogin', 'body', body)
            const localVarPath = `/v1/farmer/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1RegisterRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerServiceRegister: async (body: V1RegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('farmerServiceRegister', 'body', body)
            const localVarPath = `/v1/farmer/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FarmerServiceApi - functional programming interface
 * @export
 */
export const FarmerServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FarmerServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1LoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerServiceLogin(body: V1LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.farmerServiceLogin(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {V1RegisterRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async farmerServiceRegister(body: V1RegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RegisterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.farmerServiceRegister(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FarmerServiceApi - factory interface
 * @export
 */
export const FarmerServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FarmerServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {V1LoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerServiceLogin(body: V1LoginRequest, options?: any): AxiosPromise<V1LoginResponse> {
            return localVarFp.farmerServiceLogin(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {V1RegisterRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        farmerServiceRegister(body: V1RegisterRequest, options?: any): AxiosPromise<V1RegisterResponse> {
            return localVarFp.farmerServiceRegister(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FarmerServiceApi - object-oriented interface
 * @export
 * @class FarmerServiceApi
 * @extends {BaseAPI}
 */
export class FarmerServiceApi extends BaseAPI {
    /**
     * 
     * @param {V1LoginRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerServiceApi
     */
    public farmerServiceLogin(body: V1LoginRequest, options?: AxiosRequestConfig) {
        return FarmerServiceApiFp(this.configuration).farmerServiceLogin(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1RegisterRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FarmerServiceApi
     */
    public farmerServiceRegister(body: V1RegisterRequest, options?: AxiosRequestConfig) {
        return FarmerServiceApiFp(this.configuration).farmerServiceRegister(body, options).then((request) => request(this.axios, this.basePath));
    }
}


