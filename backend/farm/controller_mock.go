// Code generated by MockGen. DO NOT EDIT.
// Source: ./farm/controller.go

// Package farm is a generated GoMock package.
package farm

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIDatabase is a mock of IDatabase interface.
type MockIDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseMockRecorder
}

// MockIDatabaseMockRecorder is the mock recorder for MockIDatabase.
type MockIDatabaseMockRecorder struct {
	mock *MockIDatabase
}

// NewMockIDatabase creates a new mock instance.
func NewMockIDatabase(ctrl *gomock.Controller) *MockIDatabase {
	mock := &MockIDatabase{ctrl: ctrl}
	mock.recorder = &MockIDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabase) EXPECT() *MockIDatabaseMockRecorder {
	return m.recorder
}

// DecrementBarnFeed mocks base method.
func (m *MockIDatabase) DecrementBarnFeed(ctx context.Context, barnID uuid.UUID, amount uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementBarnFeed", ctx, barnID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementBarnFeed indicates an expected call of DecrementBarnFeed.
func (mr *MockIDatabaseMockRecorder) DecrementBarnFeed(ctx, barnID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementBarnFeed", reflect.TypeOf((*MockIDatabase)(nil).DecrementBarnFeed), ctx, barnID, amount)
}

// GetBarnsOfFarm mocks base method.
func (m *MockIDatabase) GetBarnsOfFarm(ctx context.Context, farmID uuid.UUID) ([]Barn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBarnsOfFarm", ctx, farmID)
	ret0, _ := ret[0].([]Barn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBarnsOfFarm indicates an expected call of GetBarnsOfFarm.
func (mr *MockIDatabaseMockRecorder) GetBarnsOfFarm(ctx, farmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBarnsOfFarm", reflect.TypeOf((*MockIDatabase)(nil).GetBarnsOfFarm), ctx, farmID)
}

// GetChicken mocks base method.
func (m *MockIDatabase) GetChicken(ctx context.Context, chickenID uuid.UUID) (Chicken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChicken", ctx, chickenID)
	ret0, _ := ret[0].(Chicken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChicken indicates an expected call of GetChicken.
func (mr *MockIDatabaseMockRecorder) GetChicken(ctx, chickenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChicken", reflect.TypeOf((*MockIDatabase)(nil).GetChicken), ctx, chickenID)
}

// GetChickensOfBarn mocks base method.
func (m *MockIDatabase) GetChickensOfBarn(ctx context.Context, barnID uuid.UUID) ([]Chicken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChickensOfBarn", ctx, barnID)
	ret0, _ := ret[0].([]Chicken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChickensOfBarn indicates an expected call of GetChickensOfBarn.
func (mr *MockIDatabaseMockRecorder) GetChickensOfBarn(ctx, barnID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChickensOfBarn", reflect.TypeOf((*MockIDatabase)(nil).GetChickensOfBarn), ctx, barnID)
}

// GetFarm mocks base method.
func (m *MockIDatabase) GetFarm(ctx context.Context, chickenID uuid.UUID) (Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarm", ctx, chickenID)
	ret0, _ := ret[0].(Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarm indicates an expected call of GetFarm.
func (mr *MockIDatabaseMockRecorder) GetFarm(ctx, chickenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarm", reflect.TypeOf((*MockIDatabase)(nil).GetFarm), ctx, chickenID)
}

// IncrementBarnFeed mocks base method.
func (m *MockIDatabase) IncrementBarnFeed(ctx context.Context, barnID uuid.UUID, amount uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementBarnFeed", ctx, barnID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementBarnFeed indicates an expected call of IncrementBarnFeed.
func (mr *MockIDatabaseMockRecorder) IncrementBarnFeed(ctx, barnID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementBarnFeed", reflect.TypeOf((*MockIDatabase)(nil).IncrementBarnFeed), ctx, barnID, amount)
}

// IncrementChickenEggLayCount mocks base method.
func (m *MockIDatabase) IncrementChickenEggLayCount(ctx context.Context, chickenID uuid.UUID, eggType int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementChickenEggLayCount", ctx, chickenID, eggType)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementChickenEggLayCount indicates an expected call of IncrementChickenEggLayCount.
func (mr *MockIDatabaseMockRecorder) IncrementChickenEggLayCount(ctx, chickenID, eggType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementChickenEggLayCount", reflect.TypeOf((*MockIDatabase)(nil).IncrementChickenEggLayCount), ctx, chickenID, eggType)
}

// InsertBarn mocks base method.
func (m *MockIDatabase) InsertBarn(ctx context.Context, barn Barn) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBarn", ctx, barn)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBarn indicates an expected call of InsertBarn.
func (mr *MockIDatabaseMockRecorder) InsertBarn(ctx, barn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBarn", reflect.TypeOf((*MockIDatabase)(nil).InsertBarn), ctx, barn)
}

// InsertChicken mocks base method.
func (m *MockIDatabase) InsertChicken(ctx context.Context, chicken Chicken) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertChicken", ctx, chicken)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertChicken indicates an expected call of InsertChicken.
func (mr *MockIDatabaseMockRecorder) InsertChicken(ctx, chicken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertChicken", reflect.TypeOf((*MockIDatabase)(nil).InsertChicken), ctx, chicken)
}

// MockIFarmer is a mock of IFarmer interface.
type MockIFarmer struct {
	ctrl     *gomock.Controller
	recorder *MockIFarmerMockRecorder
}

// MockIFarmerMockRecorder is the mock recorder for MockIFarmer.
type MockIFarmerMockRecorder struct {
	mock *MockIFarmer
}

// NewMockIFarmer creates a new mock instance.
func NewMockIFarmer(ctrl *gomock.Controller) *MockIFarmer {
	mock := &MockIFarmer{ctrl: ctrl}
	mock.recorder = &MockIFarmerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFarmer) EXPECT() *MockIFarmerMockRecorder {
	return m.recorder
}

// GetGoldEggs mocks base method.
func (m *MockIFarmer) GetGoldEggs(ctx context.Context) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoldEggs", ctx)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoldEggs indicates an expected call of GetGoldEggs.
func (mr *MockIFarmerMockRecorder) GetGoldEggs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoldEggs", reflect.TypeOf((*MockIFarmer)(nil).GetGoldEggs), ctx)
}

// SpendGoldEggs mocks base method.
func (m *MockIFarmer) SpendGoldEggs(ctx context.Context, amount uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendGoldEggs", ctx, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SpendGoldEggs indicates an expected call of SpendGoldEggs.
func (mr *MockIFarmerMockRecorder) SpendGoldEggs(ctx, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendGoldEggs", reflect.TypeOf((*MockIFarmer)(nil).SpendGoldEggs), ctx, amount)
}
