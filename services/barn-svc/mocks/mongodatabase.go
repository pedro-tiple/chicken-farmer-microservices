// Code generated by MockGen. DO NOT EDIT.
// Source: mongodatabase/mongodatabase.go

// Package mock_mongodatabase is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	barn_svc "ptiple/barn-svc"
	reflect "reflect"
)

// MockIMongoDatabase is a mock of IMongoDatabase interface
type MockIMongoDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoDatabaseMockRecorder
}

// MockIMongoDatabaseMockRecorder is the mock recorder for MockIMongoDatabase
type MockIMongoDatabaseMockRecorder struct {
	mock *MockIMongoDatabase
}

// NewMockIMongoDatabase creates a new mock instance
func NewMockIMongoDatabase(ctrl *gomock.Controller) *MockIMongoDatabase {
	mock := &MockIMongoDatabase{ctrl: ctrl}
	mock.recorder = &MockIMongoDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMongoDatabase) EXPECT() *MockIMongoDatabaseMockRecorder {
	return m.recorder
}

// InsertBarn mocks base method
func (m *MockIMongoDatabase) InsertBarn(_barn *barn_svc.Barn) (*barn_svc.Barn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBarn", _barn)
	ret0, _ := ret[0].(*barn_svc.Barn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBarn indicates an expected call of InsertBarn
func (mr *MockIMongoDatabaseMockRecorder) InsertBarn(_barn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBarn", reflect.TypeOf((*MockIMongoDatabase)(nil).InsertBarn), _barn)
}

// RemoveBarn mocks base method
func (m *MockIMongoDatabase) RemoveBarn(_id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBarn", _id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBarn indicates an expected call of RemoveBarn
func (mr *MockIMongoDatabaseMockRecorder) RemoveBarn(_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBarn", reflect.TypeOf((*MockIMongoDatabase)(nil).RemoveBarn), _id)
}

// UpdateBarn mocks base method
func (m *MockIMongoDatabase) UpdateBarn(_barn barn_svc.Barn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBarn", _barn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBarn indicates an expected call of UpdateBarn
func (mr *MockIMongoDatabaseMockRecorder) UpdateBarn(_barn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBarn", reflect.TypeOf((*MockIMongoDatabase)(nil).UpdateBarn), _barn)
}

// GetBarn mocks base method
func (m *MockIMongoDatabase) GetBarn(_id primitive.ObjectID) (*barn_svc.Barn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBarn", _id)
	ret0, _ := ret[0].(*barn_svc.Barn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBarn indicates an expected call of GetBarn
func (mr *MockIMongoDatabaseMockRecorder) GetBarn(_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBarn", reflect.TypeOf((*MockIMongoDatabase)(nil).GetBarn), _id)
}

// GetBarnsOfUser mocks base method
func (m *MockIMongoDatabase) GetBarnsOfUser(_userId primitive.ObjectID) ([]*barn_svc.Barn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBarnsOfUser", _userId)
	ret0, _ := ret[0].([]*barn_svc.Barn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBarnsOfUser indicates an expected call of GetBarnsOfUser
func (mr *MockIMongoDatabaseMockRecorder) GetBarnsOfUser(_userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBarnsOfUser", reflect.TypeOf((*MockIMongoDatabase)(nil).GetBarnsOfUser), _userId)
}
